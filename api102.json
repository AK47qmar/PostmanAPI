{"info":{"_postman_id":"d43d91fb-b355-47c9-977d-3a0a29d3b981","name":"API 101: API Fundamentals","description":"This collection is a companion to the Postman Classroom Program workshop **API 101: API Fundamentals** \n\nSee the **[lesson video](https://www.loom.com/share/071bb48e3a844b05bdadb2c8c554a6d1)**.\n\n## What you will learn \n- What are APIs?\n- Servers & Clients\n- Making HTTP requests to an API \n- Understanding API responses\n- Submitting data to APIs\n- Using query parameters to refine requests\n\n## Resources \n- [Library API (code)](https://glitch.com/edit/#!/postman-library-api)\n- [Sending Requests in Postman](https://learning.postman.com/docs/sending-requests/requests/)\n- [Receiving Responses](https://learning.postman.com/docs/sending-requests/responses/)\n- [Troubleshooting Requests](https://learning.postman.com/docs/sending-requests/troubleshooting-api-requests/)\n\n## Getting Started\n\n1. Fork this collection to your own workspace \n\n2. Complete the mission in `your turn!`\n\n## Submitting your work\n\nOnce you've finished mission in `your turn!` mission, follow the instructions on the `submit` folder","schema":"https://schema.getpostman.com/json/collection/v2.0.0/collection.json"},"item":[{"name":"Library API Reference","item":[{"name":"books","id":"d396168f-213a-4c70-be77-021ff92197d2","request":{"method":"GET","header":[],"url":{"raw":"{{baseUrl}}/books","host":["{{baseUrl}}"],"path":["books"],"query":[{"key":"search","value":"borges","description":"a search string to be matched against author/title (example: borges). Case insensitive, partial match OK.","disabled":true},{"key":"checkedOut","value":"false","description":"true/false","disabled":true},{"key":"genre","value":"fiction","description":"filter by genre (case-insensitive, exact match)","disabled":true}]},"description":"### Get books\n\nReturns all books in the library database. \n\nOptional filters can be passed as query parameters (see below)"},"response":[]},{"name":"book","id":"8386a7a4-13ed-49d8-97d6-0d2b387fe9ac","request":{"method":"GET","header":[],"url":{"raw":"{{baseUrl}}/books/:id","host":["{{baseUrl}}"],"path":["books",":id"],"variable":[{"id":"36768bb4-b2f1-4ba5-a089-2065b878451e","key":"id","value":"ZUST9JFx-Sd9X0k"}]},"description":"### Get a single book by id\n\nReplace the last part of path with the `id` of the book you would like to fetch. \n\n`/books/:id`"},"response":[]},{"name":"add book","event":[{"listen":"test","script":{"id":"8091b2ed-50a9-4b24-a414-943262b4f8f1","exec":[""],"type":"text/javascript"}}],"id":"afc95fc7-c8cc-48aa-b682-655a4dac72cf","request":{"method":"POST","header":[],"body":{"mode":"raw","raw":"{\n    \"title\": \"One Hundred Years of Solitude\",\n    \"author\": \"Gabriel García Márquez\",\n    \"genre\": \"fiction\",\n    \"yearPublished\": 1967\n}","options":{"raw":{"language":"json"}}},"url":"{{baseUrl}}/books","description":"### Add a book"},"response":[]},{"name":"update book","id":"5e79cfd0-add5-441a-a5ab-7f2d36beabb5","request":{"method":"PATCH","header":[],"body":{"mode":"raw","raw":"{\n    \"checkedOut\": true\n}","options":{"raw":{"language":"json"}}},"url":{"raw":"{{baseUrl}}/books/:id","host":["{{baseUrl}}"],"path":["books",":id"],"variable":[{"id":"4cd99b91-ca7b-42fd-a1df-3860db49e4a0","key":"id","value":"ZUST9JFx-Sd9X0k"}]},"description":"### Update a book by id\n\nUpdate any of these fields for a book with given `id` via the JSON body: \n\n- `title` (string)\n- `author` (string)\n- `genre` (string)\n- `yearPublished` (integer)\n- `checkedOut` (boolean)\n\n> Note: **Only user-added books can be edited**. Some books are part of the library's canonical collection and cannot be edited."},"response":[]},{"name":"delete book","id":"62063829-908c-44a2-beb3-d582fa16e892","request":{"method":"DELETE","header":[],"url":{"raw":"{{baseUrl}}/books/:id","host":["{{baseUrl}}"],"path":["books",":id"],"variable":[{"id":"d060194c-e6dd-4537-adc7-df922b6d1fe9","key":"id","value":"ZUST9JFx-Sd9X0k"}]}},"response":[]}],"id":"9a974ea4-69c3-416f-8504-3a84142a0e34","description":"Base URL: \n\n`https://postman-library-api.glitch.me`"},{"name":"demo (complete)","item":[{"name":"view inventory","event":[{"listen":"test","script":{"type":"text/javascript","exec":["pm.test(\"Status code is 200\", function () {","    pm.response.to.have.status(200);","});"]}}],"id":"c30539ec-7512-4e63-a404-30a287472817","request":{"method":"GET","header":[],"url":"{{baseUrl}}/books"},"response":[]},{"name":"add a book to the library","event":[{"listen":"test","script":{"type":"text/javascript","exec":["pm.test(\"Status code is 200\", function () {","    pm.response.to.have.status(201);","});","",""]}}],"id":"bf895762-afff-4dfe-a370-deaf33834c64","request":{"method":"POST","header":[],"body":{"mode":"raw","raw":"{\n    \"title\": \"The Pragmatic Programmer: From Journeyman to Master\",\n    \"author\": \"Andy Hunt, Dave Thomas\",\n    \"genre\": \"computers\",\n    \"yearPublished\": 1999\n}","options":{"raw":{"language":"json"}}},"url":"{{baseUrl}}/books"},"response":[]},{"name":"search books","event":[{"listen":"test","script":{"type":"text/javascript","exec":["pm.test(\"Status code is 200\", function () {","    pm.response.to.have.status(200);","});","",""]}}],"id":"4b43fcee-9fb2-44ad-bcb9-9b9044d5bf9b","request":{"method":"GET","header":[],"url":{"raw":"{{baseUrl}}/books?search=pragmatic","host":["{{baseUrl}}"],"path":["books"],"query":[{"key":"search","value":"pragmatic"}]}},"response":[]},{"name":"checkout a book","event":[{"listen":"test","script":{"type":"text/javascript","exec":["pm.test(\"Status code is 200\", function () {","    pm.response.to.have.status(200);","});",""]}}],"id":"a2f79aae-304f-49fa-b78b-6f059b0e7b32","request":{"method":"PATCH","header":[],"body":{"mode":"raw","raw":"{\n    \"checkedOut\": true\n}","options":{"raw":{"language":"json"}}},"url":{"raw":"{{baseUrl}}/books/:id","host":["{{baseUrl}}"],"path":["books",":id"],"variable":[{"id":"36094683-6324-44d2-a6ab-07ddf19570a9","key":"id","value":"{{id}}"}]}},"response":[]},{"name":"get details for a single book","event":[{"listen":"test","script":{"type":"text/javascript","exec":["pm.test(\"Status code is 200\", function () {","    pm.response.to.have.status(200);","});"]}}],"id":"6422cc87-05a6-4113-a3e4-3fbb56afcab3","request":{"method":"GET","header":[],"url":{"raw":"{{baseUrl}}/books/:id","host":["{{baseUrl}}"],"path":["books",":id"],"variable":[{"id":"4fef9610-69e9-4f7e-a42b-6afe19092ecc","key":"id","value":"{{id}}"}]}},"response":[]},{"name":"delete the new book","id":"3d2b12db-53da-474d-9ec4-1444d78f1f67","request":{"method":"DELETE","header":[],"url":{"raw":"{{baseUrl}}/books/:id","host":["{{baseUrl}}"],"path":["books",":id"],"variable":[{"id":"177320db-60e0-4df9-aa25-23940f7cc483","key":"id","value":"{{id}}"}]}},"response":[]}],"id":"f5d1b97b-95cf-47a4-83a1-5e4f538e2f70","description":"This demo will be done by your instructor in lecture. \n\n### Mission\n\nYou've just accepted a job as librarian at a library that uses an API to manage its books. You are at a training learning how to use the Library API.\n\n> There are multiple librarians at this library using the same API - don't be surprised if you see new books appearing!"},{"name":"your turn!","item":[{"name":"day at work","item":[{"name":"1. \"What can I check out?\"","event":[{"listen":"test","script":{"type":"text/javascript","exec":["pm.test(\"Status code is 200\", function () {","    pm.response.to.have.status(200);","});","","pm.test(\"Correct method is used in request\", function () {","    const cond = pm.request.method === \"GET\";","    pm.expect(cond).to.eql(true);","});","","pm.test(\"Correct path is used in request\", function () {","    pm.expect(pm.request.url.path[0]).to.match(/^books$/);","});","","const body = pm.response.json()","","pm.test(\"Response is an array\", function () {","    const cond = Array.isArray(body)","    pm.expect(cond).to.eql(true);","});","","pm.test(\"Only books that are not currently checked out are returned\", function () {","    const cond = body.every(book => !book.checkedOut)","    pm.expect(cond).to.eql(true);","});"]}}],"id":"a4aca6c4-c03d-4477-8c1a-35a64a2f193b","request":{"method":"GET","header":[],"url":{"raw":"{{baseUrl}}/books?checkedOut=false","host":["{{baseUrl}}"],"path":["books"],"query":[{"key":"checkedOut","value":"false"}]},"description":"### Scenario\n\nExpand the dialog:\n\n```\nYou:    \"Hi! How can I help you?\"\n\nRachel: \"I'm looking for a new book - any book. What books are available to borrow?\"\n\n```\n\n### Task \n\nUse the Library API to **get all the books that are available to borrow (not checked out)**. \n\nBe sure to save your request!"},"response":[]},{"name":"2. \"I'm teaching myself software design\"","event":[{"listen":"test","script":{"type":"text/javascript","exec":["const testsToPass = 5","let passed = 0","","pm.test(\"Status code is 200\", function () {","    pm.response.to.have.status(200);","    passed++;","});","","pm.test(\"Correct method is used in request\", function () {","    const cond = pm.request.method === \"GET\";","    pm.expect(cond).to.eql(true);","    passed++;","});","","pm.test(\"Correct path is used in request\", function () {","    pm.expect(pm.request.url.path[0]).to.match(/^books$/);","    passed++;","});","","const body = pm.response.json()","","pm.test(\"Response is an array\", function () {","    const cond = Array.isArray(body)","    pm.expect(cond).to.eql(true);","    passed++;","});","","pm.test(\"Only books from the 'computers' genre are returned\", function () {","    const cond = body.every(book => book.genre === \"computers\")","    pm.expect(cond).to.eql(true);","     passed++;","});","","if(testsToPass === passed) {","    const booksAreAvailable = !!body.map(b => !b.checkedOut).length","    if(body.length === 0) {","        console.log(\"You: 'Looks like we don't have any computer books at the moment!'\");","    } else if(booksAreAvailable) {","        console.log(\"You: 'Looks like we have some books available that might interest you! I'll take you to the computers section so you can browse'\");","    } else {","      console.log(\"You: 'We have some books but unfortunately they are all checked out right now. Come back next week!'\");","    }","}",""]}}],"id":"3538c66e-024e-43cb-bcbf-68c6c32b2f9c","request":{"method":"GET","header":[],"url":{"raw":"{{baseUrl}}/books?genre=computers","host":["{{baseUrl}}"],"path":["books"],"query":[{"key":"genre","value":"computers"}]},"description":"### Scenario\n\nExpand the dialog:\n\n```\nYou:    \"Hello! How can I help you?\"\n\nYusuf: \"I want to build up my software design skills. Do you have any books related to software architecture in the computers section?\"\n\n```\n\n### Task \n\nUse the Library API to **get all the books in the `computers` genre**, regardless of `checkedOut` status. \n\nMake sure all the tests pass. Once they do, inspect the response from the API and imagine how you might respond to Yusuf. \n\nCheck the [Postman Console](https://learning.postman.com/docs/sending-requests/troubleshooting-api-requests/#using-the-console) in the lower left for a suggested reply to Yusuf. \n\nThe Postman Console is a useful tool for debugging requests when you get errors, or you want to view logged data from your test scripts. \n\n\nBe sure to save your request!"},"response":[]},{"name":"3. \"I'd like to donate a book\"","event":[{"listen":"test","script":{"type":"text/javascript","exec":["pm.test(\"Status code is 201\", function () {","    pm.response.to.have.status(201);","});","","pm.test(\"Correct method is used in request\", function () {","    const cond = pm.request.method === \"POST\";","    pm.expect(cond).to.eql(true);","});","","pm.test(\"Correct path is used in request\", function () {","    pm.expect(pm.request.url.path[0]).to.match(/^books$/);","});","","",""]}}],"id":"f30e54f5-3258-4e8a-b87e-7c5acce316a9","request":{"method":"POST","header":[],"body":{"mode":"raw","raw":"{\r\n  \"title\": \"Stillhouse Lake\",\r\n  \"author\": \"Rachael Caine\",\r\n  \"genre\": \"thriller\",\r\n  \"yearPublished\": 1969\r\n}","options":{"raw":{"language":"json"}}},"url":"{{baseUrl}}/books","description":"### Scenario\n\nExpand the dialog:\n\n```\nSam:    \"Hi! I'd like to donate this book to the library\"\n\nYou: \"Thank you! One moment while I add it to our system...\"\n\n```\n\n### Task \n\nUse the Library API to **add Sam's book to the library's database**. As for the book details, use a book you love or have recently read! \n\nBe sure to save your request!"},"response":[]},{"name":"4. \"I'll read it!\"","event":[{"listen":"test","script":{"type":"text/javascript","exec":["pm.test(\"Status code is 200\", function () {","    pm.response.to.have.status(200);","});","","pm.test(\"Correct method is used in request\", function () {","    const cond = pm.request.method === \"PATCH\";","    pm.expect(cond).to.eql(true);","});","","pm.test(\"Correct path is used in request\", function () {","    pm.expect(pm.request.url.path[0]).to.match(/^books$/);","});","","pm.test(\"Collection variable `newBookId` is set\", function () {","    pm.expect(pm.collectionVariables.get(\"newBookId\")).to.exist","});","","pm.test(\"Updates a book's checkedOut status to 'true'\", function () {","    const reqBody = JSON.parse(pm.request.body.raw)","    const cond = reqBody.checkedOut === true","    pm.expect(cond).to.eql(true);","});",""]}}],"id":"f2ef9da7-746c-4fc3-bdf6-85802272c5d4","request":{"method":"PATCH","header":[],"body":{"mode":"raw","raw":"{\r\n    \"checkedOut\": true\r\n}","options":{"raw":{"language":"json"}}},"url":"{{baseUrl}}/books/{{newBookId}}","description":"### Scenario\n\nExpand the dialog:\n\n```\n\n(Mariya is behind Sam in line. She notices the book he just donated)\n\nMariya:  \"Ooo, that looks like a good read! Can I please check it out?\"\n\nYou:     \"Sure thing! Let me update the system...\"\n\n```\n\n\n### Task \n\nUse the Library API to make a request that will **check out the book you added in the previous request**. \n\n> Hint: You will need to figure out a way to find the `id` of the book you've just added. Take a look at the `Library API Reference` - how can you find the new book's `id`?\n\nInstead of hard-coding the `id` in the request URL, **set the id as a [collection variable](https://learning.postman.com/docs/sending-requests/variables/#defining-collection-variables) called `newBookId`**. This way you can reuse the same id in other requests like this: \\{\\{newBookId\\}\\}\n\nTo use your variable `newBookId` as a [path parameter](https://learning.postman.com/docs/sending-requests/requests/#sending-parameters) in the request URL, include `:newBookId` (with a colon in front) in your request URL. Then in the **Params** tab of the request you can specify the Value of the path parameter as your variable \\{\\{newBookId\\}\\} (with double curly braces)\n\nBe sure to save your variables and your request!"},"response":[]},{"name":"5. Check book status","event":[{"listen":"test","script":{"type":"text/javascript","exec":["pm.test(\"Status code is 200\", function () {","    pm.response.to.have.status(200);","});","","pm.test(\"Correct method is used in request\", function () {","    const cond = pm.request.method === \"GET\";","    pm.expect(cond).to.eql(true);","});","","pm.test(\"Correct path is used in request\", function () {","    pm.expect(pm.request.url.path[0]).to.match(/^books$/);","});","","pm.test(\"Collection variable `newBookId` is set\", function () {","    pm.expect(pm.collectionVariables.get(\"newBookId\")).to.exist","});","","pm.test(\"Response returns a book with status checkedOut: true\", function () {","    const body = pm.response.json()","    const cond = body.checkedOut === true","    pm.expect(cond).to.eql(true);","});",""]}}],"id":"42167e46-f58f-405a-9a13-21bc7e700877","request":{"method":"GET","header":[],"url":"{{baseUrl}}/books/{{newBookId}}","description":"### Task \n\nConfirm that the book in the previous request was checked out successfully by making a request to **get details for that specific book**. \n\nRemember to use your collection variable \\{\\{newBookId\\}\\} as the value for the [path parameter](https://learning.postman.com/docs/sending-requests/requests/#sending-parameters)  `:newBookId` in your request URL!\n\nBe sure to save your request!\n\n### Next steps \n\nFollow the instructions in the `submit` request to submit your work to your instructor."},"response":[]},{"name":"6. \"I lost the book...\"","event":[{"listen":"test","script":{"type":"text/javascript","exec":["pm.test(\"Status code is 200\", function () {","    pm.response.to.have.status(200);","});","","pm.test(\"Correct method is used in request\", function () {","    const cond = pm.request.method === \"DELETE\";","    pm.expect(cond).to.eql(true);","});","","pm.test(\"Collection variable `newBookId` is set\", function () {","    pm.expect(pm.collectionVariables.get(\"newBookId\")).to.exist","});","","pm.test(\"Correct path is used in request\", function () {","    pm.expect(pm.request.url.path[0]).to.match(/^books$/);","});"]}}],"id":"f58b8ba7-2422-488c-8c6e-a27b4dc47648","request":{"method":"DELETE","header":[],"url":"{{baseUrl}}/books/{{newBookId}}","description":"### Scenario\n\nExpand the dialog:\n\n```\n\n(Mariya returns a couple hours later)\n\nMariya:  \"...I was reading that book in the park when a crow stole it right out of my hands and flew off! Sorry, but the book is lost now.\"\n\nYou:     \"Accidents happen. I'll just remove the book from our system.\"\n\n```\n\n### Task \n\nUse the Library API to make a request that will **delete the book that Mariya checked out earlier**. \n\nRemember to use your collection variable \\{\\{newBookId\\}\\} as the value for the [path parameter](https://learning.postman.com/docs/sending-requests/requests/#sending-parameters)  `:newBookId` in your request URL!\n\nBe sure to save your request!"},"response":[]}],"id":"89fc5206-cc97-4b96-aa51-a6c56651b1b9","description":"Go through each task in order to complete a day at work as a librarian!\n\nFor each task, check the `Test Results` tab in the response and make sure all the tests are passing before moving on to the next task! Use the tests in the `Tests` tab of the request as hints if you get stuck.\n\n![image](https://user-images.githubusercontent.com/9841162/120246660-bcad8900-c225-11eb-8708-f6ba5282a698.png)\n\n### Next step\nClick the request \"1. What can I checkout?\" below and check the request documentation. You can view the documentation from the small file icon on the far-right menu of a request."},{"name":"submit","item":[{"name":"submit","event":[{"listen":"test","script":{"type":"text/javascript","exec":["// DO NOT EDIT THESE TESTS. They ensure you have completed the assignment and send data to your instructor.","","// counter for passed tests","let passed = 0","let totalToPass = 13","","pm.test(\"Status code 200 from Postman API\", function () {","    pm.response.to.have.status(200);","    passed++","});","","pm.test(\"Request path is correct and includes a collectionId\", function () {","    const path = pm.request.url.path","    pm.expect(path[0]).to.equal(\"collections\");","    pm.expect(path[1]).to.have.lengthOf.at.least(1);","    passed++","});","","const postmanApiKey = pm.environment.get(\"postman-api-key\");","","pm.test(\"'postman-api-key' is set as an active environment variable\", function () {","    const cond = !!postmanApiKey","    pm.expect(cond).to.eql(true);","    passed++","});","","const body = pm.response.json()","","const yourTurnFolder = body.collection.item.filter(i => i.name === 'your turn!')[0]","const workFolder = yourTurnFolder.item[0]","","const workRequests = workFolder.item","","pm.test(\"'day at work' folder has at least 6 requests\", function () {","    pm.expect(workRequests).to.have.lengthOf.at.least(6);","    passed++","});","","pm.test(\"Collection variable `newBookId` is set\", function () {","    pm.expect(pm.collectionVariables.get(\"newBookId\")).to.exist;","    passed++","});","","// 1","const browseRequestObj = workRequests.find(req => req.name === '1. \"What can I check out?\"')","","pm.test(\"1. \\\"What can I check out?\\\" request has correct method and path\", function () {","    const request = browseRequestObj.request","    pm.expect(request.method).to.equal('GET')","    pm.expect(request.url.path[0]).to.equal('books')","    pm.expect(request.url.query).to.have.length(1)","    pm.expect(request.url.query[0].key).to.equal(\"checkedOut\")","    pm.expect(request.url.query[0].value).to.equal(\"false\")","    passed++","});","","// 2","const genreRequestObj = workRequests.find(req => req.name === '2. \"I\\'m teaching myself software design\"')","","pm.test(\"2. \\\"I'm teaching myself software design\\\" request has correct method and path\", function () {","    const request = genreRequestObj.request","    const queryKeys = request.url.query.map(q=>q.key)","    pm.expect(request.method).to.equal('GET')","    pm.expect(request.url.path[0]).to.equal('books')","    pm.expect(queryKeys).to.include(\"genre\")","    /** Make sure any other valid query params present are disabled */","    if(queryKeys.includes(\"checkedOut\")) {","        pm.expect(request.url.query.filter(q=> q.key ===\"checkedOut\")[0]).to.haveOwnProperty(\"disabled\")","    }","    if(queryKeys.includes(\"search\")) {","        pm.expect(request.url.query.filter(q=> q.key ===\"search\")[0]).to.haveOwnProperty(\"disabled\")","    }","    pm.expect(request.url.query.filter(q=> q.key ===\"genre\")[0].value).to.equal(\"computers\")","    passed++","});","","// 3","const donateRequestObj = workRequests.find(req => req.name === '3. \"I\\'d like to donate a book\"')","","pm.test(\"3. \\\"I'd like to donate a book\\\" request has correct method and path\", function () {","    const request = donateRequestObj.request","    pm.expect(request.method).to.equal('POST')","    pm.expect(request.url.path).to.have.length(1)","    pm.expect(request.url.path[0]).to.equal('books')","    passed++","});","","pm.test(\"3. \\\"I'd like to donate a book\\\" request body has required properties\", function () {","    const reqBody = JSON.parse(donateRequestObj.request.body.raw)","    pm.expect(reqBody).to.have.property(\"title\")","    pm.expect(reqBody).to.have.property(\"author\")","    pm.expect(reqBody).to.have.property(\"genre\")","    pm.expect(reqBody).to.have.property(\"yearPublished\")","    passed++","});","","// 4","const checkoutRequestObj = workRequests.find(req => req.name === '4. \"I\\'ll read it!\"')","","pm.test(\"4. \\\"I'll read it!\\\" request has correct method and path\", function () {","    const request = checkoutRequestObj.request","    pm.expect(request.method).to.equal('PATCH')","    pm.expect(request.url.path).to.have.length(2)","    pm.expect(request.url.path[0]).to.equal('books')","    pm.expect(request.url.path[1]).to.have.lengthOf.at.least(1)","    passed++","});","","pm.test(\"4. \\\"I'll read it!\\\" request body has required properties\", function () {","    const reqBody = JSON.parse(checkoutRequestObj.request.body.raw)","    pm.expect(reqBody.checkedOut).to.eql(true)","    passed++","});","","// 5","const statusRequestObj = workRequests.find(req => req.name === '5. Check book status')","","pm.test(\"5. 'Check book status' request has correct method and path\", function () {","    const request = statusRequestObj.request","    pm.expect(request.method).to.equal('GET')","    pm.expect(request.url.path).to.have.length(2)","    pm.expect(request.url.path[0]).to.equal('books')","    pm.expect(request.url.path[1]).to.have.lengthOf.at.least(1)","    passed++","});","","// 6","const deleteRequestObj = workRequests.find(req => req.name === '6. \"I lost the book...\"')","","pm.test(\"6. 'I lost the book...' request has correct method and path\", function () {","    const request = deleteRequestObj.request","    pm.expect(request.method).to.equal('DELETE')","    pm.expect(request.url.path).to.have.length(2)","    pm.expect(request.url.path[0]).to.equal('books')","    pm.expect(request.url.path[1]).to.have.lengthOf.at.least(1)","    passed++","});","","","","","","","","","","","","","","","","","","","","","","","","// set up visualizer template","const baseStyle = `","<style>","body {","    background-color: #FF6C38;","}",".container {","    background-color: #FFF;","    border-radius: 8px;","    border: 2px solid #FF6C38;","    padding: 2rem;","    max-width: 675px;","    margin: 2rem auto;","}","",".show-on-send {","    display: none;","}","</style>","`","","// requires var 'workshopCode'","const testsPassedTemplate = `","${baseStyle}","<div class=\"container\">","    <h3>All tests passed! 🚀</h3>","    <p>Congratulations! You've completed {{workshopCode}}. If you've registered for the classroom program, enter the <strong>same email you used in registration</strong> below to submit your progress to your teacher</p>","","    <form onsubmit=\"handleSubmit(event)\">","    <input type=\"email\" name=\"email\" placeholder=\"Enter your email\" required />","    <input type=\"submit\" id=\"submit-button\"/>","    </form>","","    <p class=\"show-on-send\"><em>Please hold. It may take up to a minute to submit your data</em></p>","</div>","","<script>","const submitUrl = \"https://classroom-program-student-work-submit-prod.glitch.me/submit/{{workshopCode}}\"","","const submitButton = document.getElementById('submit-button');","const showOnSend = document.querySelector('.show-on-send');","const container = document.querySelector('.container');","","// attempt to send student data to progress monitor","async function handleSubmit(e) {","    e.preventDefault();","    enableSendingUI();","","    const studentEmail = e.target.elements.email.value;","    const data = {","        studentEmail","    }","","    try {","        const opts = { ","           method: 'post',","           body: JSON.stringify(data),","           headers: {","            'Content-Type': 'application/json'","           }","        }","","        const res = await fetch(submitUrl, opts);","        if(res.ok) {","            displaySuccessMsg();","        } else {","            displayServerErrorMsg();","        }","    } catch(err) {","        console.error(err)","        displayServerErrorMsg();","    } finally {","        disableSendingUI();","    }","}; ","","function enableSendingUI() {","   submitButton.disabled = true;","   submitButton.value = \"Sending...\";","   showOnSend.style.display = \"block\";","}","","function disableSendingUI() {","   submitButton.disabled = false;","   submitButton.value = \"Submit\";","   showOnSend.style.display = \"none\";","}","","function displaySuccessMsg() {","    const template = \"<h3>Success! 🎉</h3><p>Your teacher will be able to see your progress. Please do not resubmit your progress again.</p>\"","    container.innerHTML = template","}","","function displayServerErrorMsg() {","    const template = \"<h3>Uh oh!</h3><p>Something went wrong when attempting to submit your progress. If the problem persists, contact <code>studentprogram@postman.com</code></p>\"","    container.innerHTML = template","}","</script>","`","","const testsFailedTemplate = `","${baseStyle}","<div class=\"container\">","    <h3>Not quite done 🚫</h3>","    <p>It looks like your work is still failing some tests. Check the <strong>Test Results</strong> tab for details on which tests are failing. Fix the errors and try submitting again!</p>","</div>","`","","if (passed === totalToPass) {","    console.log('All tests passed!')","    const workshopCode = 'API101'","    pm.visualizer.set(testsPassedTemplate, { workshopCode })","} else {","    pm.visualizer.set(testsFailedTemplate)","}","",""]}}],"id":"e8d60e8e-e826-48a4-81f3-a23e0b852ae3","request":{"method":"GET","header":[{"key":"X-Api-Key","value":"{{postman-api-key}}","type":"text"}],"url":"https://api.getpostman.com/collections/{{collectionId}}","description":"To check and submit your work, follow these instructions\n\n[step-by-step video](https://www.loom.com/share/8b43484148ec49a5b5a8c2f0fcec646d)\n\n#### 1. **Save the collection ID as a collection variable**\nGet the collection ID for this collection by clicking on the collection folder (root folder), selecting the info icon `ⓘ` on the right and copying the ID.\n\nFrom the collection's \"Variables\" tab, replace the value `<replace this with this collection's id>` with the ID you got from the previous step, then **Save** the change.\n\n#### 2. **Add your Postman API key to the environment**\n*You will only need to do this step the first time you submit* \n\nIf you do not have a Postman API Key, generate one [here](https://go.postman.co/settings/me/api-keys). We will store this value as an **Environment variable** - environments allow us to share variables across multiple collections. [Create an environment](https://learning.postman.com/docs/sending-requests/managing-environments/#creating-environments) from the Environments tab and call it `my-info`. Add your Postman API key to your new environment as a variable named `postman-api-key`.\n> ⚠ When saving sensitive environment variables, remember to only use the CURRENT VALUE column\n\nMake sure you save your changes! You can use this environment for any future Postman Classroom Program workshops you complete. The `postman-api-key` variable is used in the `X-Api-Key` header of each `submit` request. \n\n\n#### 3. **Set 'my-info' environment to active**\nEnsure you environment is active by selecting it in the upper right. \n\nClick the 'eye' icon to the right to confirm there is a value present in your environment for `postman-api-key`\n\n![image](https://user-images.githubusercontent.com/9841162/124359041-35bb4a00-dbf1-11eb-8895-f9d7a0451c52.png)\n\n\n#### 4. **Check your work**\nSave your changes in the collection and environment. Hit **Send**. \n\n> If you get a `401 Unauthorized` response, carefully review steps 3 and 4 and make sure your Postman API key is correctly resolving.\n\nCheck the response. in the **Body** tab of the response, click **Visualize** to view your status.  \n\nIf any of the tests failed, you will see a \"Not quite done\" message like below. \n\n![image](https://user-images.githubusercontent.com/9841162/124359464-2a691e00-dbf3-11eb-9e90-7dd27db2bfd0.png)\n\nTo see which tests failed, open the **Test Results** tab of the response. Address the failed tests in your work and submit again.\n\n#### 5. **Submit your progress**\n*Only do this step if you are registered with the Postman Classroom Program!* \n\nIf all the tests pass, you will see a congratulations message.\n\n![image](https://user-images.githubusercontent.com/9841162/124359555-8e8be200-dbf3-11eb-8b0f-0ab6a6e1b232.png)\n\n\nIf (and only if!) you have registered for the Postman Classroom Program, you will need to submit **the same email address you used to register for the program** in the form that appears. Enter your email and hit \"Submit\". This will allow your teacher to monitor your progress!\n\nOnce your progress is submitted successfully, you are done with this module! Feel free to run the tests again whenever you like by running `submit` - but please to not re-submit your email for this module. \n\n#### Going further \n\nLearning to read API documentation is a crucial skill when working with APIs. It is also important to get familiar with reading errors. \n\nPlay around with some requests and see if you can get the API to generate any errors\n\nWhat happens when you: \n- pass unrecognized parameters?\n- hit an unrecognized endpoint?\n- try to make a PUT request on a field you don't have permission to edit?\n- try to add a book with made-up fields in the body?\n- try to delete the book named \"Ficciones\" by Jorge Luis Borges?\n\nIf you are interested in seeing the code behind this API, you can view it [here](https://glitch.com/edit/#!/postman-library-api?path=server.js%3A18%3A0)."},"response":[]}],"id":"19de5b6e-9f52-4934-87a1-f411adaddb2f"}],"id":"8a786e44-f528-40a2-b306-ebfe97244a9a","description":"## Your mission \n\nYou are a librarian at a library that uses an API to manage its books. Use the Library API to complete each of the asks from library patrons in the `day at work` folder.\n\n\n> There are multiple librarians at this library using the same API - don't be surprised if you see new books appearing!\n\n#### Before you start \n\nCheck out the request documentation in the `Library API Reference` folder to get familiar with the API and the types of requests you can make. \n\nThere are multiple ways to view documentation: \n- Click the three dots next a folder in the file explorer, then \"View Documentation\". This will show all the documentation for the whole collection. \n\n- Navigate to a request and click the small file icon in the far-right menu\n\n### Next step\nClick the \"day at work\" folder below and check the documentation.\n\n## Tip: Need help? Join us on Discord!\n\nJoin the Postman Student Community Discord server to get help from other students and Postman team members! [Join here](https://discord.gg/ndTKxHy2CF)"}],"event":[{"listen":"prerequest","script":{"id":"05be6a65-dd3f-4d3e-9b70-8f0ae2136ce1","type":"text/javascript","exec":[""]}},{"listen":"test","script":{"id":"5310aac1-f68d-482a-aaad-25652aa1f8c6","type":"text/javascript","exec":[""]}}],"variable":[{"id":"973fa05d-3eac-423c-a615-a6fc24662817","key":"baseUrl","value":"https://postman-library-api.glitch.me"},{"id":"4fcaa59d-e8e9-4bea-bf79-58ba6e8d75be","key":"id","value":"ZUST9JFx-Sd9X0k"},{"id":"607dc0ca-9ad4-404d-8d6e-72de6e4261f3","key":"collectionId","value":"18237203-d43d91fb-b355-47c9-977d-3a0a29d3b981"},{"id":"4dad07d0-4e18-421d-ba2e-86eeab35ec56","key":"newBookId","value":"luHQcPsjjnSuez2"}]}